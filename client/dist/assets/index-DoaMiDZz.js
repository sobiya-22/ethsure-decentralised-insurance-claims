import{p as c,_ as a,J as v,q as P,r as y,s as p}from"./index-B_tSOIix.js";import{t as u,E as w}from"./index-B_tSOIix.js";var s;class d extends c{constructor({config:e,state:r}){super({config:e,state:r}),a(this,"_providerEngineProxy",null)}get provider(){return this._providerEngineProxy}set provider(e){throw new Error("Method not implemented.")}async setupProvider(e){const r=this.getPrivKeyMiddleware(e),n=new v;n.push(r);const t=P(n);this.updateProviderEngineProxy(t)}async switchChain(e){return Promise.resolve()}getProviderEngineProxy(){return this._providerEngineProxy}async lookupNetwork(){return Promise.resolve("")}getPrivKeyMiddleware(e){const r={getPrivatekey:async()=>{if(!this.config.keyExportEnabled)throw new Error("Exporting private key is disabled. Please enable it in the provider config");return e}};return this.createPrivKeyMiddleware(r)}createPrivKeyMiddleware({getPrivatekey:e}){async function r(n,t){try{t.result=await e()}catch(o){t.error=o instanceof Error?o.message:o}}return y({private_key:p(r)})}}s=d;a(d,"getProviderInstance",async i=>{const e=new s({config:{chain:i.chain,chains:i.chains}});return await e.setupProvider(i.privKey),e});export{c as BaseProvider,u as CommonJRPCProvider,d as CommonPrivateKeyProvider,w as EIP1193_EVENTS};
